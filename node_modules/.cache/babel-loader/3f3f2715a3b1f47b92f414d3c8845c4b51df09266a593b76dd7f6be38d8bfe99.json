{"ast":null,"code":"import axios from 'axios';\n\n// Base URL for the API\nconst API_URL = 'http://localhost:5000/api/tasks'; // Adjust based on your backend URL\n\nexport const getTasks = async () => {\n  try {\n    const response = await axios.get(API_URL);\n    console.log('Fetched tasks:', response.data); // Add this line to inspect response structure\n    return response.data.tasks || []; // Safeguard against empty or undefined `tasks`\n  } catch (error) {\n    var _error$response;\n    console.error('Error fetching tasks:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message); // Enhanced error log\n    return [];\n  }\n};\nexport const importTasks = async file => {\n  const formData = new FormData();\n  formData.append('file', file);\n  try {\n    const response = await axios.post(`${API_URL}/import`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    console.log('Import response:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    console.error('Error importing tasks:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    throw error;\n  }\n};\n\n// Export tasks to CSV\nexport const exportTasks = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/export`, {\n      responseType: 'blob'\n    });\n    const url = window.URL.createObjectURL(new Blob([response.data]));\n    const link = document.createElement('a');\n    link.href = url;\n    link.setAttribute('download', 'tasks.csv');\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n  } catch (error) {\n    var _error$response3;\n    console.error('Error exporting tasks:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n  }\n};","map":{"version":3,"names":["axios","API_URL","getTasks","response","get","console","log","data","tasks","error","_error$response","message","importTasks","file","formData","FormData","append","post","headers","_error$response2","exportTasks","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","remove","_error$response3"],"sources":["D:/Panthi/Swiftrut/Task Management System(CSV)/Frontend/tasks_app/src/services/taskService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Base URL for the API\r\nconst API_URL = 'http://localhost:5000/api/tasks'; // Adjust based on your backend URL\r\n\r\nexport const getTasks = async () => {\r\n  try {\r\n    const response = await axios.get(API_URL);\r\n    console.log('Fetched tasks:', response.data); // Add this line to inspect response structure\r\n    return response.data.tasks || []; // Safeguard against empty or undefined `tasks`\r\n  } catch (error) {\r\n    console.error('Error fetching tasks:', error.response?.data || error.message); // Enhanced error log\r\n    return [];\r\n  }\r\n};\r\n\r\n\r\nexport const importTasks = async (file) => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n\r\n  try {\r\n    const response = await axios.post(`${API_URL}/import`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    console.log('Import response:', response.data);\r\n    return response.data; \r\n  } catch (error) {\r\n    console.error('Error importing tasks:', error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// Export tasks to CSV\r\nexport const exportTasks = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/export`, {\r\n      responseType: 'blob',\r\n    });\r\n\r\n    const url = window.URL.createObjectURL(new Blob([response.data]));\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.setAttribute('download', 'tasks.csv'); \r\n    document.body.appendChild(link);\r\n    link.click();\r\n    link.remove();\r\n  } catch (error) {\r\n    console.error('Error exporting tasks:', error.response?.data || error.message);\r\n  }\r\n};\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAG,iCAAiC,CAAC,CAAC;;AAEnD,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAACH,OAAO,CAAC;IACzCI,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC;IAC9C,OAAOJ,QAAQ,CAACI,IAAI,CAACC,KAAK,IAAI,EAAE,CAAC,CAAC;EACpC,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA;IACdL,OAAO,CAACI,KAAK,CAAC,uBAAuB,EAAE,EAAAC,eAAA,GAAAD,KAAK,CAACN,QAAQ,cAAAO,eAAA,uBAAdA,eAAA,CAAgBH,IAAI,KAAIE,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC;IAC/E,OAAO,EAAE;EACX;AACF,CAAC;AAGD,OAAO,MAAMC,WAAW,GAAG,MAAOC,IAAI,IAAK;EACzC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EAE7B,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMH,KAAK,CAACiB,IAAI,CAAC,GAAGhB,OAAO,SAAS,EAAEa,QAAQ,EAAE;MAC/DI,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACFb,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEH,QAAQ,CAACI,IAAI,CAAC;IAC9C,OAAOJ,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;IAAA,IAAAU,gBAAA;IACdd,OAAO,CAACI,KAAK,CAAC,wBAAwB,EAAE,EAAAU,gBAAA,GAAAV,KAAK,CAACN,QAAQ,cAAAgB,gBAAA,uBAAdA,gBAAA,CAAgBZ,IAAI,KAAIE,KAAK,CAACE,OAAO,CAAC;IAC9E,MAAMF,KAAK;EACb;AACF,CAAC;;AAGD;AACA,OAAO,MAAMW,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMjB,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,SAAS,EAAE;MACpDoB,YAAY,EAAE;IAChB,CAAC,CAAC;IAEF,MAAMC,GAAG,GAAGC,MAAM,CAACC,GAAG,CAACC,eAAe,CAAC,IAAIC,IAAI,CAAC,CAACvB,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC;IACjE,MAAMoB,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxCF,IAAI,CAACG,IAAI,GAAGR,GAAG;IACfK,IAAI,CAACI,YAAY,CAAC,UAAU,EAAE,WAAW,CAAC;IAC1CH,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;IAC/BA,IAAI,CAACO,KAAK,CAAC,CAAC;IACZP,IAAI,CAACQ,MAAM,CAAC,CAAC;EACf,CAAC,CAAC,OAAO1B,KAAK,EAAE;IAAA,IAAA2B,gBAAA;IACd/B,OAAO,CAACI,KAAK,CAAC,wBAAwB,EAAE,EAAA2B,gBAAA,GAAA3B,KAAK,CAACN,QAAQ,cAAAiC,gBAAA,uBAAdA,gBAAA,CAAgB7B,IAAI,KAAIE,KAAK,CAACE,OAAO,CAAC;EAChF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}