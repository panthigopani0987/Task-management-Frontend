{"ast":null,"code":"import axios from 'axios';\n\n// Base URL for the API\nconst API_URL = 'http://localhost:5000/api/tasks'; // Adjust based on your backend URL\n\n// Fetch all tasks\nexport const getTasks = async () => {\n  try {\n    const response = await axios.get(API_URL);\n    return response.data.tasks; // Adjust based on your API response structure\n  } catch (error) {\n    console.error('Error fetching tasks:', error);\n    return [];\n  }\n};\n\n// Import tasks from CSV\nexport const importTasks = async file => {\n  const formData = new FormData();\n  formData.append('file', file);\n  try {\n    const response = await axios.post(`${API_URL}/import`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data; // Contains success message and error log\n  } catch (error) {\n    console.error('Error importing tasks:', error);\n    throw error; // Re-throw error for handling in component\n  }\n};\n\n// Export tasks to CSV\nexport const exportTasks = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/export`, {\n      responseType: 'blob' // Important for handling binary data\n    });\n\n    // Create a link to download the CSV\n    const url = window.URL.createObjectURL(new Blob([response.data]));\n    const link = document.createElement('a');\n    link.href = url;\n    link.setAttribute('download', 'tasks.csv'); // Set default file name\n    document.body.appendChild(link);\n    link.click();\n    link.remove(); // Clean up the link\n  } catch (error) {\n    console.error('Error exporting tasks:', error);\n  }\n};","map":{"version":3,"names":["axios","API_URL","getTasks","response","get","data","tasks","error","console","importTasks","file","formData","FormData","append","post","headers","exportTasks","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","remove"],"sources":["D:/Panthi/Swiftrut/Task Management System(CSV)/Frontend/tasks_app/src/services/taskService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Base URL for the API\r\nconst API_URL = 'http://localhost:5000/api/tasks'; // Adjust based on your backend URL\r\n\r\n// Fetch all tasks\r\nexport const getTasks = async () => {\r\n  try {\r\n    const response = await axios.get(API_URL);\r\n    return response.data.tasks; // Adjust based on your API response structure\r\n  } catch (error) {\r\n    console.error('Error fetching tasks:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Import tasks from CSV\r\nexport const importTasks = async (file) => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n\r\n  try {\r\n    const response = await axios.post(`${API_URL}/import`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data; // Contains success message and error log\r\n  } catch (error) {\r\n    console.error('Error importing tasks:', error);\r\n    throw error; // Re-throw error for handling in component\r\n  }\r\n};\r\n\r\n// Export tasks to CSV\r\nexport const exportTasks = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/export`, {\r\n      responseType: 'blob', // Important for handling binary data\r\n    });\r\n    \r\n    // Create a link to download the CSV\r\n    const url = window.URL.createObjectURL(new Blob([response.data]));\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.setAttribute('download', 'tasks.csv'); // Set default file name\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    link.remove(); // Clean up the link\r\n  } catch (error) {\r\n    console.error('Error exporting tasks:', error);\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAG,iCAAiC,CAAC,CAAC;;AAEnD;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAACH,OAAO,CAAC;IACzC,OAAOE,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAME,WAAW,GAAG,MAAOC,IAAI,IAAK;EACzC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EAE7B,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMH,KAAK,CAACc,IAAI,CAAC,GAAGb,OAAO,SAAS,EAAEU,QAAQ,EAAE;MAC/DI,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOZ,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;;AAED;AACA,OAAO,MAAMS,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,SAAS,EAAE;MACpDgB,YAAY,EAAE,MAAM,CAAE;IACxB,CAAC,CAAC;;IAEF;IACA,MAAMC,GAAG,GAAGC,MAAM,CAACC,GAAG,CAACC,eAAe,CAAC,IAAIC,IAAI,CAAC,CAACnB,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;IACjE,MAAMkB,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxCF,IAAI,CAACG,IAAI,GAAGR,GAAG;IACfK,IAAI,CAACI,YAAY,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC,CAAC;IAC5CH,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;IAC/BA,IAAI,CAACO,KAAK,CAAC,CAAC;IACZP,IAAI,CAACQ,MAAM,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC,CAAC,OAAOxB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;EAChD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}